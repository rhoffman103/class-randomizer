{"version":3,"sources":["context/roster-context.js","components/Roster/RosterSelector.js","rosters/index.js","components/GroupDivider/DividerForm.js","components/GroupDivider/GroupList.js","reducers/groups.js","components/GroupDivider/GroupDivider.js","reducers/roster.js","components/Roster/RosterContainer.js","App.js","serviceWorker.js","index.js"],"names":["RosterContext","React","createContext","RosterSelector","_useContext","useContext","rosters","rosterDispatch","react_default","a","createElement","Form_default","className","Group","controlId","Label","Control","as","onChange","e","value","currentTarget","type","rosterIndex","defaultValue","map","roster","index","key","concat","name","DividerForm","groupsDispatch","rosterState","_useState","useState","_useState2","Object","slicedToArray","groupSize","setGroupSize","callGroupsDispatch","useCallback","arguments","length","undefined","scrubbedValue","useEffect","document","getElementById","target","GroupList","groupState","group","Card_default","style","width","id","Header","groupNumber","Body","members","member","j","shuffle","array","temporaryValue","randomIndex","mutatedArray","element","currentIndex","Math","floor","random","groupsReducer","state","action","_ref","_ref$groupSize","_ref$rosterState","numOfGroups","remainder","decrementingStudents","groups","i","toString","substr","push","pop","decrementingGroups","randomGroupIndex","indexOf","randomizeGroups","GroupDivider","_useReducer","useReducer","_useReducer2","roster_context","Provider","Row_default","GroupDivider_DividerForm","GroupDivider_GroupList","rosterReducer","RosterContainer","Rosters","Roster_RosterSelector","components_GroupDivider_GroupDivider","App","Container_default","Roster_RosterContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.190beaaa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RosterContext = React.createContext();\r\n\r\nexport default RosterContext;","import React, { useContext } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport RosterContext from '../../context/roster-context';\r\n\r\nconst RosterSelector = () => {\r\n\r\n    const { rosters, rosterDispatch } = useContext(RosterContext);\r\n    const setRoster = (value) => {\r\n        if (value !== 'null') {\r\n            rosterDispatch({\r\n                type: 'SET_ROSTER',\r\n                rosterIndex: value\r\n            })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form className=\"m-2\">\r\n            <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                <Form.Label>Rosters</Form.Label>\r\n                <Form.Control as=\"select\" onChange={(e) => setRoster(e.currentTarget.value)}>\r\n                    <option defaultValue value=\"null\">select roster</option>\r\n                    {rosters.map((roster, index) => {\r\n                        return <option key={`id-${roster.name}-${index}`} value={index}>{roster.name}</option>\r\n                    })}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default RosterSelector;","const rosters = [\r\n    {\r\n        name: 'June 2019',\r\n        roster: [\r\n            'Aly S',\r\n            'Anthony A',\r\n            'Daniel A',\r\n            'David W',\r\n            'Drew P',\r\n            'Elias R',\r\n            'Emily C',\r\n            'Emily R',\r\n            'Ibrahim Y',\r\n            'Jason M',\r\n            'Jeremy M',\r\n            'John D',\r\n            'Johnny M',\r\n            'Julia C',\r\n            'Keith N',\r\n            'Kenneth P',\r\n            'Maria S',\r\n            'Markus M',\r\n            'Michael H',\r\n            'Michael N',\r\n            'Nathaniel C',\r\n            'Nik A',\r\n            'Peter R',\r\n        ]\r\n    }, {\r\n        name: 'Dummy Roster',\r\n        roster: [\r\n            'Morty Smith',\r\n            'Rick Sanchez',\r\n            'Summer Smith',\r\n            'Beth Smith',\r\n            'Jerry Smith',\r\n            'Mr. Meeseeks',\r\n            'Birdperson',\r\n            'Squanchy',\r\n            'Abradolf Lincler',\r\n            'Unity',\r\n            'Mr. Poopybutthole',\r\n            'Morty Jr.',\r\n            'Pencilvester',\r\n            'Sleepy Gary',\r\n            'Tinkles',\r\n            'Uncle Steve',\r\n            'Cousin Nicky',\r\n            'Ghost in a Jar',\r\n            'Mr. Beauregard',\r\n            'Mrs. Refrigerator',\r\n            'Photography Raptor',\r\n            'Reverse Giraffe',\r\n            'Krombopulos Michael',\r\n            'Revolio \"Gearhead\" Clockberg, Jr'\r\n        ]\r\n    }\r\n]\r\n\r\nexport default rosters;","import React, { useContext, useEffect, useState, useCallback } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport RosterContext from '../../context/roster-context';\r\n\r\nconst DividerForm = () => {\r\n\r\n    const { groupsDispatch, rosterState } = useContext(RosterContext);\r\n    const [groupSize, setGroupSize] = useState(0);\r\n\r\n    const callGroupsDispatch = useCallback((value = 0, roster) => {\r\n        const scrubbedValue = `${value !== 'null' ? value : 0}`;\r\n        groupsDispatch({\r\n            type: 'RANDOMIZE_GROUPS',\r\n            groupSize: scrubbedValue,\r\n            rosterState: roster\r\n        });\r\n    }, [groupsDispatch]);\r\n    \r\n    const setGroups = (value) => {\r\n        setGroupSize(value);\r\n        callGroupsDispatch(value, rosterState.roster)\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.getElementById('group-select').value = 'null';\r\n        setGroupSize(0)\r\n        callGroupsDispatch(0, rosterState.roster)\r\n    }, [rosterState, callGroupsDispatch]);\r\n\r\n    return (\r\n        <Form className=\"m-2\">\r\n            <Form.Group controlId=\"group-select\">\r\n                <Form.Label>Group Size</Form.Label>\r\n                <Form.Control\r\n                    as=\"select\"\r\n                    value={groupSize}\r\n                    onChange={(e) => setGroups(e.target.value)}\r\n                >\r\n                    <option defaultValue value='null'>select group size</option>\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default DividerForm;","import React, { useContext } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport RosterContext from '../../context/roster-context';\r\n\r\nconst GroupList = () => {\r\n    const { groupState } = useContext(RosterContext);\r\n\r\n    return groupState.map((group) => (\r\n        <Card\r\n            className=\"m-2 group-cards\"\r\n            style={{ width: '18rem' }}\r\n            key={group.id}\r\n        >\r\n            <Card.Header>Group {group.groupNumber}</Card.Header>\r\n            <Card.Body>\r\n                <ul>\r\n                    {group.members.map((member, j) => {\r\n                        return (\r\n                            <li key={`${group.id}-${j}`}>{member}</li>\r\n                        )\r\n                    })}\r\n                </ul>   \r\n            </Card.Body>\r\n        </Card>\r\n    ));\r\n};\r\n\r\nexport default GroupList;","const uniqueId = () => `id-${Math.random().toString(36).substr(2, 16)}`;\r\n\r\nconst shuffle = (array) => {\r\n        \r\n    let mutatedArray = array.map(element => element)\r\n    let currentIndex = mutatedArray.length;\r\n    let temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = mutatedArray[currentIndex];\r\n        mutatedArray[currentIndex] = mutatedArray[randomIndex];\r\n        mutatedArray[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return mutatedArray;\r\n};\r\n\r\nconst randomizeGroups = ({ groupSize = 0, rosterState = [] }) => {\r\n\r\n    const numOfGroups = Math.floor(rosterState.length / groupSize);\r\n    const remainder = rosterState.length % groupSize;\r\n    const decrementingStudents = shuffle(rosterState);\r\n    const groups = [];\r\n\r\n    if (groupSize !== '0') {\r\n\r\n        for (let i = 0; i < numOfGroups; i++) {\r\n            const group = {\r\n                id: uniqueId(),\r\n                groupNumber: i + 1,\r\n                members: [],\r\n            }\r\n            for (let j = 0; j < groupSize; j++) {\r\n                group.members.push(decrementingStudents.pop())\r\n            }\r\n            groups.push(group);\r\n        };\r\n\r\n        if (remainder > 0) {\r\n            const decrementingGroups = shuffle(groups)\r\n\r\n            for (let i = 0; i < remainder; i++) {\r\n                const randomGroupIndex = groups.indexOf(decrementingGroups.pop())\r\n                groups[randomGroupIndex].members.push(decrementingStudents.pop())\r\n            }\r\n        };\r\n    };\r\n\r\n    return groups;\r\n};\r\n\r\nconst groupsReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'RANDOMIZE_GROUPS':\r\n            return randomizeGroups(action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default groupsReducer;","import React, { useReducer, useContext } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport DividerForm from './DividerForm';\r\nimport RosterContext from '../../context/roster-context';\r\nimport GroupList from './GroupList';\r\nimport groupsReducer from '../../reducers/groups';\r\n\r\nconst GroupDivider = () => {\r\n    \r\n    const { rosterState } = useContext(RosterContext)  \r\n    const [groupState, groupsDispatch] = useReducer(groupsReducer, []);\r\n\r\n    return(\r\n        <RosterContext.Provider value={{ groupState, rosterState, groupsDispatch }}>\r\n            <div className=\"group-divider m-2\">\r\n                <Row>\r\n                    <h2 className=\"m-2\">Group Divider</h2>\r\n                </Row>\r\n                <Row>\r\n                    <DividerForm />\r\n                </Row>\r\n                <Row>\r\n                    <GroupList />\r\n                </Row>\r\n            </div>\r\n        </RosterContext.Provider>\r\n    );\r\n};\r\n\r\nexport default GroupDivider;","import rosters from '../rosters';\r\n\r\nconst rosterReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'SET_ROSTER':\r\n            return rosters[action.rosterIndex];\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default rosterReducer;","import React, { useState, useReducer } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport RosterSelector from './RosterSelector';\r\nimport RosterContext from '../../context/roster-context';\r\nimport Rosters from '../../rosters';\r\nimport GroupDivider from '../GroupDivider/GroupDivider';\r\nimport rosterReducer from '../../reducers/roster';\r\n\r\nconst RosterContainer = () => {\r\n\r\n    const rosters = useState(Rosters);\r\n    const [rosterState, rosterDispatch] = useReducer(rosterReducer, [{ name: 'poop', members: ['caca'] }])\r\n\r\n    return (\r\n        <RosterContext.Provider value={{ rosters: rosters[0], rosterState, rosterDispatch }}>\r\n            <div className=\"roster-container\">\r\n                <Row>\r\n                    <h2 className=\"m-2\">Select Roster</h2>\r\n                </Row>\r\n                <Row>\r\n                    <RosterSelector />\r\n                </Row>\r\n                <Row>\r\n                    <GroupDivider />\r\n                </Row>\r\n            </div>\r\n        </RosterContext.Provider>\r\n    );\r\n}\r\n\r\nexport default RosterContainer;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport RosterContainer from './components/Roster/RosterContainer';\n\nfunction App() {\n  return (\n    <Container>\n      <RosterContainer />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}